import { expect } from "@std/expect";
import { solve } from "../src/mod.ts";

const SUCCESS_BOARDS = [
  {
    name: "Simple",
    rules: {
      row: [
        [{ count: 1, val: 1 }],
        [],
      ],
      column: [
        [{ count: 1, val: 1 }],
        [],
      ],
    },
    expectedBoard: [[1, -1], [-1, -1]],
  },
  {
    name: "Complex Single Color",
    rules: {
      "column": [[
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 5 },
        { val: 1, count: 4 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 5 },
        { val: 1, count: 6 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 4 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 1, count: 3 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 3 },
        { val: 1, count: 3 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 6 },
        { val: 1, count: 2 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 5 },
        { val: 1, count: 10 },
        { val: 1, count: 3 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 6 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 3 },
        { val: 1, count: 2 },
        { val: 1, count: 2 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 2 },
        { val: 1, count: 4 },
        { val: 1, count: 4 },
        { val: 1, count: 3 },
      ], [
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 5 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 3 },
        { val: 1, count: 6 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 1, count: 3 },
        { val: 1, count: 3 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
      ]],
      "row": [[
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
      ], [
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 4 },
        { val: 1, count: 3 },
        {
          val: 1,
          count: 2,
        },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 3 },
        { val: 1, count: 3 },
        { val: 1, count: 4 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
      ], [
        { val: 1, count: 6 },
        { val: 1, count: 1 },
        { val: 1, count: 4 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 1, count: 5 },
      ], [
        { val: 1, count: 4 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
      ], [
        { val: 1, count: 2 },
        { val: 1, count: 2 },
        { val: 1, count: 2 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 8 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
      ], [
        { val: 1, count: 7 },
        { val: 1, count: 1 },
        { val: 1, count: 5 },
      ], [
        { val: 1, count: 2 },
        { val: 1, count: 2 },
        { val: 1, count: 2 },
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 2 },
        { val: 1, count: 9 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 3 },
        { val: 1, count: 3 },
        { val: 1, count: 5 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 4 },
        { val: 1, count: 11 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 2 },
        { val: 1, count: 3 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 1, count: 4 },
      ], [
        { val: 1, count: 4 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 5 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
      ], [
        { val: 1, count: 5 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
      ]],
    },
    expectedBoard: [
      [1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1],
      [-1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1],
      [-1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1],
      [1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1],
      [-1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1],
      [1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1],
      [1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, 1, -1, -1, -1],
      [1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1],
      [1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1],
      [-1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1],
      [1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1],
      [1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1],
      [1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1],
      [1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1],
      [-1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1],
      [1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1],
      [-1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1],
      [-1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1],
    ],
  },
  {
    name: "Complex Multicolored",
    rules: {
      "column": [[
        { val: 1, count: 2 },
        { val: 1, count: 6 },
        { val: 5, count: 5 },
        { val: 4, count: 1 },
        { val: 4, count: 2 },
      ], [
        { val: 1, count: 5 },
        { val: 1, count: 1 },
        { val: 5, count: 2 },
        { val: 5, count: 2 },
        { val: 5, count: 1 },
        { val: 4, count: 1 },
      ], [
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 5, count: 3 },
        { val: 5, count: 1 },
        { val: 5, count: 1 },
        { val: 5, count: 1 },
      ], [
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 5, count: 1 },
        { val: 3, count: 4 },
        { val: 5, count: 1 },
        { val: 5, count: 1 },
      ], [
        { val: 1, count: 2 },
        { val: 1, count: 4 },
        { val: 3, count: 1 },
        { val: 3, count: 4 },
        { val: 5, count: 3 },
      ], [
        { val: 1, count: 5 },
        { val: 1, count: 1 },
        { val: 3, count: 3 },
        { val: 3, count: 1 },
        { val: 5, count: 2 },
        { val: 2, count: 1 },
      ], [
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 4, count: 2 },
        { val: 3, count: 1 },
        { val: 3, count: 1 },
        { val: 2, count: 1 },
      ], [
        { val: 1, count: 2 },
        { val: 4, count: 2 },
        { val: 5, count: 1 },
        { val: 3, count: 3 },
        { val: 3, count: 1 },
        { val: 2, count: 2 },
      ], [
        { val: 3, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 4, count: 1 },
        { val: 4, count: 1 },
        { val: 3, count: 1 },
        { val: 3, count: 3 },
        { val: 3, count: 1 },
        { val: 2, count: 1 },
      ], [
        { val: 3, count: 1 },
        { val: 1, count: 3 },
        { val: 5, count: 1 },
        { val: 5, count: 1 },
        { val: 3, count: 3 },
        { val: 3, count: 1 },
        { val: 5, count: 1 },
        { val: 4, count: 1 },
      ], [
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 3, count: 1 },
        { val: 3, count: 2 },
        { val: 2, count: 2 },
        { val: 2, count: 2 },
        { val: 4, count: 2 },
      ], [
        { val: 3, count: 1 },
        { val: 5, count: 2 },
        { val: 1, count: 2 },
        { val: 3, count: 1 },
        { val: 3, count: 3 },
        { val: 2, count: 2 },
        { val: 2, count: 1 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 3, count: 1 },
        { val: 3, count: 3 },
        { val: 2, count: 2 },
        { val: 2, count: 1 },
        { val: 2, count: 1 },
      ], [
        { val: 3, count: 3 },
        { val: 3, count: 1 },
        { val: 4, count: 1 },
        { val: 4, count: 1 },
        { val: 3, count: 1 },
        { val: 2, count: 3 },
        { val: 2, count: 3 },
      ], [
        { val: 3, count: 5 },
        { val: 4, count: 1 },
        { val: 4, count: 3 },
        { val: 3, count: 2 },
        { val: 2, count: 1 },
        { val: 2, count: 2 },
      ], [
        { val: 3, count: 2 },
        { val: 3, count: 1 },
        { val: 4, count: 3 },
        { val: 4, count: 2 },
        { val: 3, count: 1 },
        { val: 2, count: 1 },
        { val: 2, count: 2 },
        { val: 2, count: 2 },
      ], [
        { val: 3, count: 2 },
        { val: 4, count: 1 },
        { val: 4, count: 2 },
        { val: 3, count: 2 },
        { val: 2, count: 2 },
        { val: 2, count: 1 },
        { val: 2, count: 1 },
      ], [
        { val: 2, count: 1 },
        { val: 2, count: 2 },
        { val: 3, count: 1 },
        { val: 4, count: 4 },
        { val: 2, count: 7 },
      ], [
        { val: 2, count: 2 },
        { val: 3, count: 4 },
        { val: 3, count: 1 },
        { val: 2, count: 1 },
        { val: 2, count: 1 },
      ], [
        { val: 2, count: 2 },
        { val: 3, count: 1 },
        { val: 3, count: 11 },
        { val: 2, count: 1 },
      ]],
      row: [[
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 3, count: 2 },
        { val: 1, count: 1 },
        { val: 3, count: 1 },
        { val: 3, count: 3 },
        { val: 2, count: 2 },
      ], [
        { val: 1, count: 9 },
        { val: 1, count: 1 },
        { val: 5, count: 1 },
        { val: 1, count: 1 },
        { val: 3, count: 3 },
        { val: 2, count: 1 },
      ], [
        { val: 1, count: 3 },
        { val: 1, count: 3 },
        { val: 1, count: 1 },
        { val: 5, count: 1 },
        { val: 3, count: 2 },
        { val: 3, count: 1 },
        { val: 2, count: 1 },
      ], [
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 3, count: 3 },
        { val: 2, count: 1 },
        { val: 2, count: 1 },
      ], [
        { val: 1, count: 7 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 3, count: 2 },
        { val: 4, count: 1 },
        { val: 3, count: 1 },
        { val: 2, count: 1 },
      ], [
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 4, count: 4 },
        { val: 3, count: 2 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 3 },
        { val: 4, count: 1 },
        { val: 4, count: 1 },
        { val: 3, count: 1 },
        { val: 3, count: 1 },
        { val: 4, count: 1 },
        { val: 4, count: 1 },
        { val: 4, count: 1 },
        { val: 3, count: 1 },
      ], [
        { val: 1, count: 5 },
        { val: 4, count: 2 },
        { val: 4, count: 1 },
        { val: 4, count: 2 },
        { val: 3, count: 2 },
      ], [
        { val: 1, count: 1 },
        { val: 1, count: 2 },
        { val: 1, count: 1 },
        { val: 4, count: 2 },
        { val: 5, count: 1 },
        { val: 3, count: 1 },
        { val: 4, count: 5 },
        { val: 3, count: 2 },
      ], [
        { val: 5, count: 1 },
        { val: 5, count: 1 },
        { val: 3, count: 3 },
        { val: 4, count: 2 },
        { val: 3, count: 1 },
      ], [
        { val: 5, count: 3 },
        { val: 3, count: 1 },
        { val: 3, count: 2 },
        { val: 5, count: 1 },
        { val: 3, count: 1 },
        { val: 3, count: 3 },
        { val: 3, count: 1 },
      ], [
        { val: 5, count: 3 },
        { val: 3, count: 1 },
        { val: 3, count: 1 },
        { val: 3, count: 1 },
        { val: 3, count: 1 },
        { val: 3, count: 4 },
        { val: 2, count: 1 },
        { val: 3, count: 1 },
        { val: 3, count: 2 },
      ], [
        { val: 5, count: 1 },
        { val: 5, count: 1 },
        { val: 3, count: 7 },
        { val: 3, count: 1 },
        { val: 2, count: 1 },
        { val: 2, count: 1 },
        { val: 3, count: 1 },
      ], [
        { val: 5, count: 2 },
        { val: 3, count: 3 },
        { val: 3, count: 2 },
        { val: 2, count: 1 },
        { val: 3, count: 1 },
        { val: 2, count: 2 },
        { val: 2, count: 3 },
        { val: 3, count: 1 },
      ], [
        { val: 5, count: 3 },
        { val: 3, count: 2 },
        { val: 3, count: 1 },
        { val: 3, count: 1 },
        { val: 2, count: 1 },
        { val: 2, count: 3 },
        { val: 2, count: 2 },
        { val: 3, count: 1 },
      ], [
        { val: 3, count: 1 },
        { val: 3, count: 1 },
        { val: 3, count: 1 },
        { val: 2, count: 1 },
        { val: 2, count: 1 },
        { val: 2, count: 2 },
        { val: 3, count: 1 },
      ], [
        { val: 4, count: 1 },
        { val: 5, count: 2 },
        { val: 3, count: 1 },
        { val: 3, count: 1 },
        { val: 2, count: 6 },
        { val: 2, count: 1 },
        { val: 3, count: 1 },
      ], [
        { val: 5, count: 2 },
        { val: 2, count: 1 },
        { val: 2, count: 1 },
        { val: 2, count: 2 },
        { val: 2, count: 2 },
        { val: 3, count: 1 },
      ], [
        { val: 4, count: 1 },
        { val: 5, count: 1 },
        { val: 5, count: 2 },
        { val: 2, count: 2 },
        { val: 5, count: 1 },
        { val: 4, count: 1 },
        { val: 2, count: 2 },
        { val: 2, count: 1 },
        { val: 2, count: 1 },
        { val: 2, count: 1 },
      ], [
        { val: 4, count: 2 },
        { val: 5, count: 3 },
        { val: 2, count: 2 },
        { val: 4, count: 2 },
        { val: 2, count: 1 },
        { val: 2, count: 2 },
      ]],
    },
    expectedBoard: [
      [1, -1, 1, -1, 1, 1, 1, -1, 3, 3, 1, 3, -1, 3, 3, 3, -1, 2, 2, -1],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 5, 1, 3, 3, 3, -1, -1, 2, -1],
      [-1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 5, -1, 3, 3, -1, 3, 2, -1, -1],
      [1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 3, 3, 3, 2, -1, 2],
      [1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 3, 3, 4, -1, 3, -1, 2],
      [1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 4, 4, 4, 4, 3, 3],
      [1, -1, 1, 1, 1, -1, 4, -1, 4, -1, 3, -1, 3, 4, -1, 4, -1, 4, 3, -1],
      [1, 1, 1, 1, 1, -1, 4, 4, -1, -1, -1, -1, -1, -1, 4, -1, 4, 4, 3, 3],
      [1, -1, 1, 1, -1, 1, -1, 4, 4, 5, 3, -1, -1, 4, 4, 4, 4, 4, 3, 3],
      [-1, -1, -1, 5, -1, -1, -1, 5, -1, -1, 3, 3, 3, -1, 4, 4, -1, -1, -1, 3],
      [5, 5, 5, -1, 3, -1, -1, 3, 3, 5, -1, -1, 3, -1, 3, 3, 3, -1, -1, 3],
      [5, 5, 5, 3, -1, 3, -1, 3, -1, 3, -1, 3, 3, 3, 3, 2, 3, -1, 3, 3],
      [5, -1, 5, 3, 3, 3, 3, 3, 3, 3, -1, 3, -1, 2, -1, -1, -1, 2, -1, 3],
      [5, 5, -1, 3, 3, 3, -1, -1, 3, 3, 2, 3, 2, 2, -1, -1, 2, 2, 2, 3],
      [5, 5, 5, 3, 3, -1, 3, -1, 3, -1, 2, -1, 2, 2, 2, -1, 2, 2, -1, 3],
      [-1, -1, -1, -1, 3, -1, -1, 3, -1, 3, -1, 2, -1, -1, -1, 2, -1, 2, 2, 3],
      [4, -1, 5, 5, -1, 3, -1, -1, 3, -1, 2, 2, 2, 2, 2, 2, -1, 2, -1, 3],
      [-1, -1, -1, -1, 5, 5, -1, 2, -1, -1, 2, -1, -1, 2, 2, -1, 2, 2, -1, 3],
      [4, 5, -1, -1, 5, 5, -1, 2, 2, 5, 4, -1, 2, 2, -1, 2, -1, 2, -1, 2],
      [4, 4, 5, 5, 5, 2, 2, -1, -1, 4, 4, 2, -1, -1, -1, 2, 2, -1, -1, -1],
    ],
  },
];
Deno.test("Success", async (t) => {
  for (const test of SUCCESS_BOARDS) {
    await t.step(test.name, () => {
      const result = solve(test.rules);
      expect(result.solved).toBe(true);
      expect(result.board).toEqual(test.expectedBoard);
      expect(result.unsolved.rows).toEqual([]);
      expect(result.unsolved.columns).toEqual([]);
    });
  }
});

const FAILURE_BOARDS = [
  {
    name: "Simple",
    rules: {
      "row": [[
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 1 },
      ]],
      "column": [[
        { val: 1, count: 1 },
      ], [
        { val: 1, count: 1 },
      ]],
    },
    expectedBoard: [[0, 0], [0, 0]],
    unsolvedRows: [0, 1],
    unsolvedCols: [0, 1],
  },
  {
    name: "Ambiguous Multicolor",
    rules: {
      "column": [
        [{ val: 2, count: 1 }, { val: 1, count: 1 }, { val: 1, count: 1 }, { val: 2, count: 2 }],
        [{ val: 1, count: 1 }, { val: 2, count: 2 }],
        [{ val: 2, count: 1 }],
        [{ val: 1, count: 3 }, { val: 2, count: 2 }],
        [{ val: 2, count: 1 }, { val: 1, count: 1 }, { val: 1, count: 3 }, { val: 2, count: 1 }],
        [{ val: 1, count: 1 }, { val: 2, count: 2 }],
        [{ val: 2, count: 1 }, { val: 1, count: 1 }, {
          val: 2,
          count: 1,
        }],
        [{ val: 1, count: 1 }, { val: 2, count: 1 }, {
          val: 1,
          count: 1,
        }, { val: 1, count: 1 }],
        [{ val: 1, count: 3 }],
        [{ val: 1, count: 1 }, { val: 1, count: 3 }],
      ],
      "row": [
        [{ val: 1, count: 1 }],
        [{ val: 2, count: 1 }, { val: 2, count: 1 }],
        [{ val: 1, count: 1 }, { val: 1, count: 2 }, {
          val: 1,
          count: 1,
        }],
        [{ val: 1, count: 1 }, { val: 1, count: 1 }],
        [{ val: 1, count: 2 }, { val: 1, count: 1 }],
        [{ val: 1, count: 2 }, { val: 1, count: 2 }, {
          val: 2,
          count: 2,
        }, { val: 1, count: 1 }],
        [{ val: 1, count: 1 }, { val: 1, count: 2 }],
        [{ val: 2, count: 2 }, { val: 2, count: 1 }, {
          val: 1,
          count: 1,
        }],
        [
          { val: 2, count: 2 },
          { val: 2, count: 1 },
          { val: 2, count: 2 },
          { val: 1, count: 1 },
          { val: 1, count: 1 },
        ],
        [{ val: 2, count: 1 }, { val: 2, count: 2 }, {
          val: 1,
          count: 1,
        }],
      ],
    },
    expectedBoard: [
      [-1, -1, -1, -1, -1, 0, -1, 0, -1, 0],
      [2, -1, -1, -1, 2, -1, -1, -1, -1, -1],
      [1, -1, -1, 0, 1, 0, -1, 0, 0, 0],
      [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1],
      [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1],
      [1, 1, -1, 0, 1, 0, 2, 2, 0, 0],
      [-1, -1, -1, -1, 1, -1, 1, 1, -1, -1],
      [0, 0, 0, 0, 0, 0, -1, -1, -1, 1],
      [2, 2, -1, 2, -1, 2, 2, 1, -1, 1],
      [0, 0, 0, 0, 0, 0, -1, -1, -1, 1],
    ],
    unsolvedRows: [0, 2, 5, 7, 9],
    unsolvedCols: [0, 1, 2, 3, 4, 5, 7, 8, 9],
  },
];

Deno.test("Failed", async (t) => {
  for (const test of FAILURE_BOARDS) {
    await t.step(test.name, () => {
      const result = solve(test.rules);
      expect(result.solved).toBe(false);
      expect(result.board).toEqual(test.expectedBoard);
      expect(result.unsolved.rows).toEqual(test.unsolvedRows);
      expect(result.unsolved.columns).toEqual(test.unsolvedCols);
    });
  }
});
